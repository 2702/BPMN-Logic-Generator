package parser;

import graph.DirectedGraph;
import graph.Marker;
import graph.Node;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * Class for parsing XML files generated by VisualParadigm
 * 
 * @author Maciek
 * 
 */
public class VisualParadigmXmlParser extends AbstractParser {

	private DirectedGraph mGraph = new DirectedGraph();

	@Override
	public DirectedGraph parse(String filename) {
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
                dbf.setNamespaceAware(true);
		dbf.setIgnoringComments(true);
		dbf.setIgnoringElementContentWhitespace(true);

		DocumentBuilder db;
		try {			
			db = dbf.newDocumentBuilder();
			Document dom = db.parse(filename);

			Element projElement = dom.getDocumentElement();
			// there is exactly one Model
			Element modelsElement = (Element) projElement.getElementsByTagName("Models").item(0);

			// Every task is represented by node in graph
			NodeList tasks = modelsElement.getElementsByTagName("BPTask");
			parseTasks(tasks);

			// Parse gateways
			NodeList gateways = modelsElement.getElementsByTagName("BPGateway");
			parseGateways(gateways);

			// Every sequence is connection between nodes
                        XPathFactory xpathFactory = XPathFactory.newInstance();
                        XPath xPath = xpathFactory.newXPath();
                        XPathExpression xPathExpressionSequences = xPath.compile("//Models//ModelChildren//BPSequenceFlow");
                        NodeList sequences = (NodeList) xPathExpressionSequences.evaluate(dom, XPathConstants.NODESET);
			parseSequences(sequences);

			// TODO: more!

		} catch (Exception e) {
			e.printStackTrace();
		}

		return mGraph;
	}

	void parseGateways(NodeList gateways) {
		for (int i = 0; i < gateways.getLength(); i++) {
			Element el = (Element) gateways.item(i);
			final String id = el.getAttribute("Id");
			final String formula = el.getAttribute("Name");
			Node node = new Node(id, formula);

			Element gatewayTypeEl = (Element) el.getElementsByTagName("GatewayType").item(0);
			final String gatewayType = gatewayTypeEl.getElementsByTagName("*").item(0).getNodeName();
			// I have no idea why this who't work ;|
			// gatewayTypeEl.getFirstChild()

			if (gatewayType.equals("BPGatewayDataBasedXOR") || gatewayType.equals("BPGatewayEventBasedXOR")) {
				node.setMarker(Marker.EXCLUSIVE_CHOICE);
			}
			if (gatewayType.equals("BPGatewayDataBasedAND")) {
				node.setMarker(Marker.PARALLEL_SPLIT);
			}
			if (gatewayType.equals("BPGatewayComplex")) {
				node.setMarker(Marker.MULTI_CHOICE);
			}
			mGraph.addVertex(node);
			System.out.println("gateway id = " + id + "    formula: " + formula);
		}

	}

	void parseTasks(NodeList tasks) {
		for (int i = 0; i < tasks.getLength(); i++) {
			Element el = (Element) tasks.item(i);
			final String id = el.getAttribute("Id");
			final String formula = el.getAttribute("Name");
			mGraph.addVertex(new Node(id, formula));
			System.out.println("task id = " + id + "    formula: " + formula);
		}
	}

	private void parseSequences(NodeList sequences) {
		for (int i = 0; i < sequences.getLength(); i++) {
			Element el = (Element) sequences.item(i);
			final String fromId = el.getAttribute("From");
			final String toId = el.getAttribute("To");
			System.out.println("Trying New connection: " + fromId + "--->" + toId);
			mGraph.addEdge(fromId, toId);
			// System.out.println("New connection: " + fromId + "--->" + toId);
		}
	}
}
