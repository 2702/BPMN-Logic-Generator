package parser;

import graph.Graph;
import graph.Node;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * Class for parsing XML files generated by VisualParadigm
 * 
 * @author Maciek
 * 
 */
public class VisualParadigmXmlParser extends AbstractParser {

	private Graph mGraph = new Graph();

	@Override
	public Graph parse(String filename) {
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

		DocumentBuilder db;
		try {
			XPathFactory xpathFactory = XPathFactory.newInstance();
			db = dbf.newDocumentBuilder();
			Document dom = db.parse(filename);

			Element projElement = dom.getDocumentElement();
			// there is exactly o
			Element modelsElement = (Element) projElement.getElementsByTagName("Models").item(0);

			// Every task is represented by node in graph
			NodeList tasks = modelsElement.getElementsByTagName("BPTask");
			parseTasks(tasks);

			XPath xpath = xpathFactory.newXPath();
			NodeList sequences = (NodeList) xpath.evaluate(
					//This is madness!
					"ModelRelationshipContainer/ModelChildren/ModelRelationshipContainer/ModelChildren/BPSequenceFlow", modelsElement,
					XPathConstants.NODESET);
			// Every sequence is connection between nodes
			parseSequences(sequences);

			// TODO: more!

		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (XPathExpressionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mGraph;
	}

	void parseTasks(NodeList tasks) {
		for (int i = 0; i < tasks.getLength(); i++) {
			Element el = (Element) tasks.item(i);
			final String id = el.getAttribute("Id");
			final String formula = el.getAttribute("Name");
			mGraph.addNode(new Node(id, formula));
			System.out.println("id = " + id + "    formula: " + formula);
		}
	}

	private void parseSequences(NodeList sequences) {
		for (int i = 0; i < sequences.getLength(); i++) {
			Element el = (Element) sequences.item(i);
			final String fromId = el.getAttribute("From");
			final String toId = el.getAttribute("To");
			mGraph.addConnection(fromId, toId);
			System.out.println("New connection: " + fromId + "--->" + toId);
		}
	}
}
